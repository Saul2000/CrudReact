{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["data","id","character","anime","App","state","form","modalInsert","modalEdit","handleChange","e","setState","target","name","value","showModalInsert","closeModalInsert","showModalEdit","registro","closeModalEdit","Insert","newValue","length","list","push","Edit","dato","contador","map","Delete","window","confirm","splice","Container","Button","color","onClick","Table","this","element","Modal","isOpen","ModalHeader","ModalBody","FormGroup","className","readOnly","type","onChange","ModalFooter","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b93f984.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table, Button, Container, Modal, ModalBody, ModalHeader, ModalFooter, FormGroup } from 'reactstrap';\n\nconst data = [\n  { id: 1, character: \"Naruto\", anime: \"Naruto\" },\n  { id: 2, character: \"Goku\", anime: \"Dragon Ball\" },\n  { id: 3, character: \"Kenshin Himura\", anime: \"Ruroni Kenshin\" },\n  { id: 4, character: \"Monkey D. Luffy\", anime: \"One Piece\" },\n  { id: 5, character: \"Edward Elric\", anime: \"Fullmetal Alchemist: Brotherhood\" },\n  { id: 6, character: \"Seto Kaiba\", anime: \"Yu-Gi-Oh!\" },\n];\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    form: {\n      id:'',\n      character:'',\n      anime:''\n    },\n    modalInsert: false,\n    modalEdit: false\n  };\n\n  handleChange=e=> {\n    this.setState({\n      form:{\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      }\n    });\n  }\n\n  showModalInsert=()=>{\n    this.setState({modalInsert: true});\n  }\n\n  closeModalInsert=()=>{\n    this.setState({modalInsert: false});\n  }\n\n  showModalEdit=(registro)=>{\n    this.setState({modalEdit: true, form: registro});\n  }\n\n  closeModalEdit=()=>{\n    this.setState({modalEdit: false});\n  }\n\n  Insert=()=>{\n    var newValue={...this.state.form};\n    newValue.id=this.state.data.length+1;\n    var list=this.state.data;\n    list.push(newValue);\n    this.setState({data: list, modalInsert: false});\n  }\n\n  Edit=(dato)=>{\n    var contador=0;\n    var list=this.state.data;\n    list.map((registro)=>{\n      if(dato.id==registro.id){\n        list[contador].character=dato.character;\n        list[contador].anime=dato.anime;\n      }\n      contador++;\n    });\n    this.setState({data: list, modalEdit: false});\n  }\n\n  Delete=(dato)=>{\n    var option=window.confirm(\"Are you sure deleting the register \"+dato.id);\n    if(option){\n      var contador=0;\n      var list = this.state.data;\n      list.map((registro)=>{\n        if(registro.id==dato.id){\n          list.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({data: list});\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <br />\n          <Button color=\"success\" onClick={()=>this.showModalInsert()}>Insert new character</Button>\n          <br /><br />\n\n          <Table>\n            <thead>\n              <tr>\n                <th>Id</th>\n                <th>Character</th>\n                <th>Anime</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((element) => (\n                <tr>\n                  <td>{element.id}</td>\n                  <td>{element.character}</td>\n                  <td>{element.anime}</td>\n                  <td>\n                    <Button color=\"primary\" onClick={()=>this.showModalEdit(element)}>Edit</Button>\n                    {\"  \"}\n                    <Button color=\"danger\" onClick={()=>this.Delete(element)}>Delete</Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalInsert}>\n          <ModalHeader>\n            <div><h3>Insert character</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>Id:</label>\n              <input className=\"form-control\" readOnly type=\"text\" value={this.state.data.length+1}/>\n            </FormGroup>\n\n            <FormGroup>\n              <label>Character:</label>\n              <input className=\"form-control\" name=\"character\" type=\"text\" onChange={this.handleChange}/>\n            </FormGroup>\n\n            <FormGroup>\n              <label>Anime:</label>\n              <input className=\"form-control\" name=\"anime\" type=\"text\" onChange={this.handleChange}/>\n            </FormGroup>\n\n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={()=>this.Insert()}>Insert</Button>\n            <Button color=\"danger\" onClick={()=>this.closeModalInsert()}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n\n        <Modal isOpen={this.state.modalEdit}>\n          <ModalHeader>\n            <div><h3>Edit character</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>Id:</label>\n              <input className=\"form-control\" readOnly type=\"text\" value={this.state.form.id}/>\n            </FormGroup>\n\n            <FormGroup>\n              <label>Character:</label>\n              <input className=\"form-control\" name=\"character\" type=\"text\" onChange={this.handleChange} value={this.state.form.character}/>\n            </FormGroup>\n\n            <FormGroup>\n              <label>Anime:</label>\n              <input className=\"form-control\" name=\"anime\" type=\"text\" onChange={this.handleChange} value={this.state.form.anime}/>\n            </FormGroup>\n\n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={()=>this.Edit(this.state.form)}>Edit</Button>\n            <Button color=\"danger\" onClick={()=>this.closeModalEdit()}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}